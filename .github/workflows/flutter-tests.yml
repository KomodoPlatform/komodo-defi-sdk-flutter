name: Flutter package tests (matrix)
permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, dev, feat/**, bugfix/**, hotfix/**]
  workflow_dispatch:
    inputs:
      package:
        description: "Optional package path to test (e.g., packages/komodo_coin_updates or komodo_coin_updates)"
        required: false
      package_regex:
        description: "Optional regex to filter packages (applied to full path under packages/*)"
        required: false

jobs:
  discover:
    name: Discover packages
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build package matrix from packages/*/pubspec.yaml
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          input_pkg="${{ github.event.inputs.package || '' }}"
          input_re="${{ github.event.inputs.package_regex || '' }}"

          # Discover all packages with pubspec.yaml
          mapfile -t all_pkgs < <(find packages -mindepth 1 -maxdepth 1 -type d -exec test -e '{}/pubspec.yaml' ';' -print | sort)

          filter_pkgs=()
          if [ -n "$input_pkg" ]; then
            # Normalize to packages/<name>
            if [[ "$input_pkg" != packages/* ]]; then
              input_pkg="packages/$input_pkg"
            fi
            if [ -e "$input_pkg/pubspec.yaml" ]; then
              filter_pkgs+=("$input_pkg")
            else
              echo "No pubspec.yaml found at $input_pkg; producing empty matrix" >&2
            fi
          elif [ -n "$input_re" ]; then
            while IFS= read -r p; do
              if echo "$p" | grep -Eq "$input_re"; then
                filter_pkgs+=("$p")
              fi
            done < <(printf '%s\n' "${all_pkgs[@]}")
          else
            filter_pkgs=("${all_pkgs[@]}")
          fi

          # Keep only packages that contain a test/ directory
          with_tests=()
          for p in "${filter_pkgs[@]}"; do
            if [ -d "$p/test" ]; then
              with_tests+=("$p")
            fi
          done

          if [ ${#with_tests[@]} -eq 0 ]; then
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          json=$(printf '%s\n' "${with_tests[@]}" | jq -R -s -c 'split("\n")[:-1] | map({path: .})')
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  test:
    name: Flutter test (${{ matrix.package.path }})
    needs: discover
    if: ${{ needs.discover.outputs.matrix != '' && needs.discover.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.discover.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.1"
          architecture: x64

      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Flutter pub get
        run: flutter pub get
        working-directory: ${{ matrix.package.path }}

      - name: Run dry web build to generate assets (expected to fail)
        env:
          GITHUB_API_PUBLIC_READONLY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: packages/komodo_defi_sdk/example
        run: flutter build web --release || echo "Dry build completed (failure expected)"

      - name: Run tests
        env:
          GITHUB_API_PUBLIC_READONLY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: flutter test -r expanded
        working-directory: ${{ matrix.package.path }}
