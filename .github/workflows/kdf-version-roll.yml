name: Roll KDF Version

on:
  schedule:
    # Run daily at midnight (UTC)
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      kdf_branch:
        description: "KDF branch to check for updates (defaults to branch in build config)"
        required: false
        default: ""
        type: string
      sdk_branch:
        description: "SDK branch to create PR against (defaults to current branch)"
        required: false
        default: ""
        type: string

jobs:
  # Job for scheduled runs, uses matrix to check both dev and main
  schedule-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' }}
    strategy:
      fail-fast: false
      matrix:
        kdf_branch: ["dev", "main"]
    outputs:
      has_updates: ${{ steps.check-updates.outputs.has_updates }}
      branch: ${{ steps.determine-branch.outputs.branch }}
      current_commit: ${{ steps.current-details.outputs.commit }}
      new_commit: ${{ steps.check-updates.outputs.new_commit }}
      source_urls: ${{ steps.get-source-urls.outputs.source_urls }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: |
          cd packages/komodo_wallet_cli
          dart pub get

      - name: Determine KDF branch
        id: determine-branch
        run: |
          # For scheduled runs, use the matrix branch value
          KDF_BRANCH="${{ matrix.kdf_branch }}"
          echo "Using KDF branch: $KDF_BRANCH"
          echo "branch=$KDF_BRANCH" >> $GITHUB_OUTPUT

      - name: Get source URLs from config
        id: get-source-urls
        run: |
          SOURCE_URLS=$(cat packages/komodo_defi_framework/app_build/build_config.json | jq -c '.api.source_urls')
          echo "source_urls=$SOURCE_URLS" >> $GITHUB_OUTPUT
          echo "Source URLs: $SOURCE_URLS"

      - name: Get current commit details
        id: current-details
        run: |
          COMMIT=$(cat packages/komodo_defi_framework/app_build/build_config.json | jq -r '.api.api_commit_hash')
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

      - name: Check for new commit
        id: check-updates
        run: |
          BRANCH="${{ steps.determine-branch.outputs.branch }}"
          CURRENT_COMMIT="${{ steps.current-details.outputs.commit }}"

          # Get latest commit for the branch
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/KomodoPlatform/komodo-defi-framework/commits/$BRANCH")
          NEW_COMMIT=$(echo $RESPONSE | jq -r '.sha')

          echo "Current commit: $CURRENT_COMMIT"
          echo "Latest commit: $NEW_COMMIT"

          if [[ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]]; then
            echo "New commit found!"
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "new_commit=$NEW_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No updates available."
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

  # Job for manual workflow dispatch, uses the specified branch
  manual-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    outputs:
      has_updates: ${{ steps.check-updates.outputs.has_updates }}
      branch: ${{ steps.determine-branch.outputs.branch }}
      current_commit: ${{ steps.current-details.outputs.commit }}
      new_commit: ${{ steps.check-updates.outputs.new_commit }}
      source_urls: ${{ steps.get-source-urls.outputs.source_urls }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: |
          cd packages/komodo_wallet_cli
          dart pub get

      - name: Determine KDF branch
        id: determine-branch
        run: |
          # For manual workflow runs, check for specified branch
          if [[ -n "${{ github.event.inputs.kdf_branch }}" ]]; then
            KDF_BRANCH="${{ github.event.inputs.kdf_branch }}"
          # Otherwise fallback to branch in config
          else
            KDF_BRANCH=$(cat packages/komodo_defi_framework/app_build/build_config.json | jq -r '.api.branch')
          fi
          echo "Using KDF branch: $KDF_BRANCH"
          echo "branch=$KDF_BRANCH" >> $GITHUB_OUTPUT

      - name: Get source URLs from config
        id: get-source-urls
        run: |
          SOURCE_URLS=$(cat packages/komodo_defi_framework/app_build/build_config.json | jq -c '.api.source_urls')
          echo "source_urls=$SOURCE_URLS" >> $GITHUB_OUTPUT
          echo "Source URLs: $SOURCE_URLS"

      - name: Get current commit details
        id: current-details
        run: |
          COMMIT=$(cat packages/komodo_defi_framework/app_build/build_config.json | jq -r '.api.api_commit_hash')
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

      - name: Check for new commit
        id: check-updates
        run: |
          BRANCH="${{ steps.determine-branch.outputs.branch }}"
          CURRENT_COMMIT="${{ steps.current-details.outputs.commit }}"

          # Get latest commit for the branch
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/KomodoPlatform/komodo-defi-framework/commits/$BRANCH")
          NEW_COMMIT=$(echo $RESPONSE | jq -r '.sha')

          echo "Current commit: $CURRENT_COMMIT"
          echo "Latest commit: $NEW_COMMIT"

          if [[ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]]; then
            echo "New commit found!"
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "new_commit=$NEW_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No updates available."
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

  roll-kdf-version:
    needs: [schedule-check, manual-check]
    if: |
      (needs.schedule-check.outputs.has_updates == 'true' && github.event_name == 'schedule') || 
      (needs.manual-check.outputs.has_updates == 'true' && github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: |
          cd packages/komodo_wallet_cli
          dart pub get

      - name: Create branch for roll
        run: |
          # Determine which job's outputs to use based on event type
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            KDF_BRANCH="${{ needs.schedule-check.outputs.branch }}"
            NEW_COMMIT="${{ needs.schedule-check.outputs.new_commit }}"
          else
            KDF_BRANCH="${{ needs.manual-check.outputs.branch }}"
            NEW_COMMIT="${{ needs.manual-check.outputs.new_commit }}"
          fi

          SHORT_COMMIT="${NEW_COMMIT:0:7}"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b kdf-roll/$KDF_BRANCH-$SHORT_COMMIT

      - name: Roll KDF version
        id: roll-version
        run: |
          # Determine which job's outputs to use based on event type
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            KDF_BRANCH="${{ needs.schedule-check.outputs.branch }}"
            CURRENT_COMMIT="${{ needs.schedule-check.outputs.current_commit }}"
            NEW_COMMIT="${{ needs.schedule-check.outputs.new_commit }}"
            SOURCE_URLS='${{ needs.schedule-check.outputs.source_urls }}'
          else
            KDF_BRANCH="${{ needs.manual-check.outputs.branch }}"
            CURRENT_COMMIT="${{ needs.manual-check.outputs.current_commit }}"
            NEW_COMMIT="${{ needs.manual-check.outputs.new_commit }}"
            SOURCE_URLS='${{ needs.manual-check.outputs.source_urls }}'
          fi

          echo "Running update_api_config tool..."
          cd packages/komodo_wallet_cli
          mkdir -p ../komodo_defi_framework/app_build/temp_downloads

          # Try each source URL in order until one succeeds
          SUCCESS=false
          for SOURCE_URL in $(echo $SOURCE_URLS | jq -r '.[]'); do
            echo "Trying source URL: $SOURCE_URL"
            
            # Determine source type from URL
            if [[ "$SOURCE_URL" == *"api.github.com"* ]]; then
              SOURCE_TYPE="github"
            else
              SOURCE_TYPE="mirror"
            fi
            
            echo "Using source type: $SOURCE_TYPE"
            
            # Try roll with this source
            if dart bin/update_api_config.dart \
              --branch "$KDF_BRANCH" \
              --source "$SOURCE_TYPE" \
              --config ../komodo_defi_framework/app_build/build_config.json \
              --output-dir ../komodo_defi_framework/app_build/temp_downloads \
              --verbose; then
              
              echo "Successfully rolled using $SOURCE_URL"
              SUCCESS=true
              break
            else
              echo "Failed to roll using $SOURCE_URL, trying next source..."
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "All sources failed. Exiting with error."
            exit 1
          fi

      - name: Test build the SDK example project
        run: |
          echo "Running flutter build bundle in the SDK example to validate the configuration"
          cd packages/komodo_defi_sdk/example
          flutter pub get
          flutter build bundle
          if [ $? -ne 0 ]; then
            echo "::error::Failed to build SDK example project. The KDF version roll might have introduced incompatibilities."
            exit 1
          fi
          echo "SDK example project built successfully!"
          cd ../../../

      - name: Commit changes
        run: |
          # Determine which job's outputs to use based on event type
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            KDF_BRANCH="${{ needs.schedule-check.outputs.branch }}"
            NEW_COMMIT="${{ needs.schedule-check.outputs.new_commit }}"
          else
            KDF_BRANCH="${{ needs.manual-check.outputs.branch }}"
            NEW_COMMIT="${{ needs.manual-check.outputs.new_commit }}"
          fi

          SHORT_COMMIT="${NEW_COMMIT:0:7}"

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git add packages/komodo_defi_framework/app_build/build_config.json
          git commit -m "chore: roll KDF version to commit $SHORT_COMMIT for branch $KDF_BRANCH"
          git push origin kdf-roll/$KDF_BRANCH-$SHORT_COMMIT

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine which job's outputs to use based on event type
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            KDF_BRANCH="${{ needs.schedule-check.outputs.branch }}"
            NEW_COMMIT="${{ needs.schedule-check.outputs.new_commit }}"
            CURRENT_COMMIT="${{ needs.schedule-check.outputs.current_commit }}"
          else
            KDF_BRANCH="${{ needs.manual-check.outputs.branch }}"
            NEW_COMMIT="${{ needs.manual-check.outputs.new_commit }}"
            CURRENT_COMMIT="${{ needs.manual-check.outputs.current_commit }}"
          fi

          SHORT_COMMIT="${NEW_COMMIT:0:7}"

          # Determine SDK branch for PR base
          SDK_BRANCH="$KDF_BRANCH"  # Default to same as KDF branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.sdk_branch }}" ]]; then
            SDK_BRANCH="${{ github.event.inputs.sdk_branch }}"
          fi

          # If running on a branch (not via workflow_dispatch), use current branch as SDK branch
          if [[ "${{ github.event_name }}" != "workflow_dispatch" && "$SDK_BRANCH" == "$KDF_BRANCH" ]]; then
            CURRENT_BRANCH=$(git branch --show-current)
            if [[ -n "$CURRENT_BRANCH" ]]; then
              SDK_BRANCH="$CURRENT_BRANCH"
            fi
          fi

          echo "Using KDF branch: $KDF_BRANCH"
          echo "Using SDK branch: $SDK_BRANCH"

          PR_TITLE="chore: roll KDF version to commit $SHORT_COMMIT for branch $KDF_BRANCH"
          PR_BODY="This PR rolls the KDF version to the latest commit ($SHORT_COMMIT) for the '$KDF_BRANCH' branch.

          **Changes:**
          - Rolled KDF version from \`$CURRENT_COMMIT\` to \`$NEW_COMMIT\`

          This PR was automatically generated by GitHub Actions."

          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "$SDK_BRANCH" \
            --head "kdf-roll/$KDF_BRANCH-$SHORT_COMMIT"
